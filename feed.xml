<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stan Zonov</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 01 Mar 2018 22:56:49 -0500</pubDate>
    <lastBuildDate>Thu, 01 Mar 2018 22:56:49 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Simulation</title>
        <description>&lt;p&gt;Here is a neat simulation I ran recently (play with double speed).&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/vXwqjX3IU18&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;It is  based on the following equations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/equations.png&quot; alt=&quot;equations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;and with inspiration from &lt;a href=&quot;http://geoffboeing.com/2016/12/animating-lorenz-attractor-python/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 18:00:00 -0500</pubDate>
        <link>/programming/2018/03/01/simulation/</link>
        <guid isPermaLink="true">/programming/2018/03/01/simulation/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Gallery Test</title>
        <description>
</description>
        <pubDate>Tue, 26 Dec 2017 19:00:00 -0500</pubDate>
        <link>/photos/2017/12/26/gallery-test/</link>
        <guid isPermaLink="true">/photos/2017/12/26/gallery-test/</guid>
        
        
        <category>photos</category>
        
      </item>
    
      <item>
        <title>Creating a Notification</title>
        <description>&lt;p&gt;Are you running some code that takes a long time to finish? Want to know exactly when it is done?&lt;/p&gt;

&lt;p&gt;Are you running some cron job? Want to know when some specific event occurs?&lt;/p&gt;

&lt;p&gt;Want to know via email?&lt;/p&gt;

&lt;p&gt;A simple way to solve your questions is to use Google App Script and create a web app:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Open up your Google Drive.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a new Google App Script called &lt;code class=&quot;highlighter-rouge&quot;&gt;AlertMessage&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the code to &lt;code class=&quot;highlighter-rouge&quot;&gt;code.gs&lt;/code&gt;&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
 function doGet(request) {
     MailApp.sendEmail(&quot;your@gmail.com&quot;, request.parameter.subject, request.parameter.message);
     var result = {
         sent: 0 == 0
     };
     return ContentService.createTextOutput(JSON.stringify(result))
 }
&lt;/code&gt;
 Where &lt;code class=&quot;highlighter-rouge&quot;&gt;your@gmail.com&lt;/code&gt; is your Google email account on which you made the Google App Script.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Publish &amp;gt; Deploy as web app...&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Who has access to the app:&lt;code class=&quot;highlighter-rouge&quot;&gt;Anyone, even anonymous&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Press &lt;code class=&quot;highlighter-rouge&quot;&gt;Deploy&lt;/code&gt; and give the appropriate permissions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the full current web app URL: &lt;code class=&quot;highlighter-rouge&quot;&gt;https://script.google.com/macros/s/.../exec&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; is the Google generated portion)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;On your computer terminal you can now send notifications via:&lt;br /&gt;
 &lt;code class=&quot;highlighter-rouge&quot;&gt;
 curl -L &quot;https://script.google.com/macros/s/.../exec?subject=TITLE&amp;amp;message=UNDERSCORE_FOR_SPACES_INSIDE_MESSAGE&quot;
&lt;/code&gt;
 which will cause your Gmail inbox to get a new message.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is a very simple script that can be modified to do some really neat stuff. Hope this helps.&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Jul 2017 18:00:00 -0400</pubDate>
        <link>/programming/2017/07/16/Creating-a-notification/</link>
        <guid isPermaLink="true">/programming/2017/07/16/Creating-a-notification/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Beautiful 3 Set</title>
        <description>&lt;p&gt;I was on hackerrank the other day trying to solve &lt;a href=&quot;https://www.hackerrank.com/challenges/beautiful-3-set&quot;&gt;‘Beautiful 3 Set’&lt;/a&gt;. The problem goes like this:&lt;/p&gt;

&lt;p&gt;You are given an integer &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. A set, &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, of triples &lt;code class=&quot;highlighter-rouge&quot;&gt;(x_i, y_i, z_i)&lt;/code&gt; is beautiful if and only if:
 1. &lt;code class=&quot;highlighter-rouge&quot;&gt;0 &amp;lt;= x_i, y_i, z_i&lt;/code&gt;
 2. &lt;code class=&quot;highlighter-rouge&quot;&gt;x_i + y_i + z_i = n&lt;/code&gt;, For all &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; such that &lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt;= i &amp;lt;= |S|&lt;/code&gt;
 3. Let X be the set of different &lt;code class=&quot;highlighter-rouge&quot;&gt;x_i&lt;/code&gt;’s in S, Y be the set of different &lt;code class=&quot;highlighter-rouge&quot;&gt;y_i&lt;/code&gt;’s in S, and Z be the set of different &lt;code class=&quot;highlighter-rouge&quot;&gt;z_i&lt;/code&gt; in S. Then &lt;code class=&quot;highlighter-rouge&quot;&gt;|X| = |Y| = |Z| = |S|&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The third condition means that all &lt;code class=&quot;highlighter-rouge&quot;&gt;x_i&lt;/code&gt;’s are pairwise distinct. The same goes for &lt;code class=&quot;highlighter-rouge&quot;&gt;y_i&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z_i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Problem: Given &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, find any beautiful set having maximum number of elements. Then print the cardinality of &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; on a new line, followed by &lt;code class=&quot;highlighter-rouge&quot;&gt;|S|&lt;/code&gt; lines where each line contains 3 space-separated integers describing the respective values of &lt;code class=&quot;highlighter-rouge&quot;&gt;x_i&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;y_i&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z_i&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Input Format:&lt;/p&gt;

&lt;p&gt;A sample integer, n. (1 &amp;lt;= n &amp;lt;= 300)&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;The solution to this problem is not obvious. Writing out the testcases for the first few &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is difficult for verification and the questions of uniqueness for each &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; comes up. Is there a quick and easy way of coming up with the solution without having to brute force? The answer to the question is &lt;em&gt;yes&lt;/em&gt;, because otherwise hackerrank will reject the slow solution. There must be a quick solution and we shall find it (not always the case in general).&lt;/p&gt;

&lt;p&gt;At this point I had no real intuition on the problem and decided to brute force the problem first. For the brute force approach, a basic outline of the strategy is to come up with all potential &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; sets and store the largest ones of them for each &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. We don’t know if these &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; sets are unique(excluding column &lt;code class=&quot;highlighter-rouge&quot;&gt;-(x|y|z)&lt;/code&gt; switching) for a given &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; so we will have to store them all. Now let’s get into the specifics of our strategy:&lt;/p&gt;

&lt;p&gt;For each &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; we will store all &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; that satisfy the first three conditions described in the problem description. To generate a single &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, we need some sort of global set to choose from. In other words, we need to generate all valid &lt;code class=&quot;highlighter-rouge&quot;&gt;(x_i, y_i, z_i)&lt;/code&gt; triples as our basis. Each &lt;code class=&quot;highlighter-rouge&quot;&gt;(x|y|z)_i&lt;/code&gt; is a number from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; (inclusive) and the triplets thus can be generated using a nested for loop with indexes &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt; (once you know the first two numbers then you know the last &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; number since &lt;code class=&quot;highlighter-rouge&quot;&gt;x+y+z=n&lt;/code&gt;). This gives an upper bound of &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt; pairs.&lt;/p&gt;

&lt;p&gt;Once you have generated all the possible triplets and have filtered all the invalid ones out by the second condition, then you can start generating potential &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; candidates. For any given set &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt;, each existing triplet in the basis is either in &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; or not ~ a binary choice. The binary choice is a good hint on some sort of recursive approach. By checking all potential &lt;code class=&quot;highlighter-rouge&quot;&gt;S&lt;/code&gt; our runtime for this will be &lt;code class=&quot;highlighter-rouge&quot;&gt;O(2^{|triplet_basis_set_size})&lt;/code&gt; which has an upper bound. Definitely won’t work for &lt;code class=&quot;highlighter-rouge&quot;&gt;n=300&lt;/code&gt; on hackerrank.&lt;/p&gt;

&lt;p&gt;Thus the runtime of our brute force approach is &lt;code class=&quot;highlighter-rouge&quot;&gt;O(2^{n^2})&lt;/code&gt; (it is easy to optimize the brute force algorithm… but it would still be too slow for hackerrank). That is crazy slow! This is why we are doing this brute force approach on our machine and not hackerrank. Here is the brute force code:
```
#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;&lt;/sstream&gt;&lt;/fstream&gt;&lt;/iostream&gt;&lt;/p&gt;

&lt;p&gt;using namespace std;&lt;/p&gt;

&lt;p&gt;int n_limit = 20;&lt;/p&gt;

&lt;p&gt;bool is_file_exist(const char *fileName){
    std::ifstream infile(fileName);
    return infile.good();
}&lt;/p&gt;

&lt;p&gt;/*
x,y,z array are responsible for storing the basis of triples from which we select
The ith indeces of these arrays contain the ith triple.&lt;/p&gt;

&lt;p&gt;index represents the current index we are looking at in our recursive binary method&lt;/p&gt;

&lt;p&gt;//curNum is the current number we are processing (from n_limit)
this is useful for file writing/appending
*/
int generatingS(int * x,int * y,int * z,int index,int arrLength, int *x_cov, int *y_cov, int *z_cov, int max, int curNum){&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//not enough space left to maximize set
//TODO: implement this feature

if(index==arrLength){
	//we reached the bottom. check the set size by counting x_cov
	//and returning that number 
	int size=0;
	for(int i = 0; i &amp;lt; curNum+1; i++){
		if(x_cov[i]!=0){
			size++;
		}
	}
	if(max &amp;gt; size){//current entry is not bigger
		return max;
	}			
	//write it to file
	
	std::ofstream outfile;

	stringstream ss;
	ss&amp;lt;&amp;lt;curNum&amp;lt;&amp;lt;&quot;.txt&quot;;
	
	outfile.open(ss.str(), std::ios_base::app);
	outfile&amp;lt;&amp;lt;size&amp;lt;&amp;lt;endl;
	for(int i = 0; i &amp;lt; curNum+1; i++){
		if(x_cov[i]!=0){//output out all the pairs
			outfile&amp;lt;&amp;lt;x[x_cov[i]-1]&amp;lt;&amp;lt;&quot; &quot;&amp;lt;&amp;lt;y[x_cov[i]-1]&amp;lt;&amp;lt;&quot; &quot;&amp;lt;&amp;lt;z[x_cov[i]-1]&amp;lt;&amp;lt;endl;
		}
	}outfile&amp;lt;&amp;lt;endl;

	
	return size;
}


//assume that (x[index], y[index], z[index]) is in S
//in order to make this assumption valid we need to check if 
//(x|y|z)[index] has already been tagged in (x|y|z)_cov[(x|y|z)[index]]
//This is an optimization that says if this triplet can&#39;t possibly be
//part of the solution the don&#39;t recurse further with assumption that it is
//part of solution
if(x_cov[x[index]]==0&amp;amp;&amp;amp;y_cov[y[index]]==0&amp;amp;&amp;amp;z_cov[z[index]]==0){
	//tag so that inner layers of recursion now that the numbers in triplet
	//are in use
	x_cov[x[index]]=index+1;
	y_cov[y[index]]=index+1;
	z_cov[z[index]]=index+1;
	max = generatingS(x,y,z,index+1,arrLength,x_cov,y_cov,z_cov,max,curNum);
	
	//untag the values
	x_cov[x[index]]=0;
	y_cov[y[index]]=0;
	z_cov[z[index]]=0;
}

//assume that (x[index], y[index], z[index]) is not in S
max = generatingS(x,y,z,index+1,arrLength,x_cov,y_cov,z_cov,max,curNum);
return max; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;int main(){
	for(int n = 2; n &amp;lt;= n_limit; n++){
		cout«n«endl;
		int index = 0;
		int upperBound = n*n;
		int * basis_x = new int[upperBound];
		int * basis_y = new int[upperBound];
		int * basis_z = new int[upperBound];
		//first generate the triplet basis
		//(since i,j,k start at zero then condition 1 auto satisfied) 
		for(int i = 0; i &amp;lt;= n; i++){
			for(int j = 0; j &amp;lt;= n-i; j++){
				int k = n-j-i;
				//satifies condition 2: add to our basis
				basis_x[index] = i;
				basis_y[index] = j;
				basis_z[index] = k;
				//cout«i«” ”«j«” ”«k«endl;
				index++;	
			}
		}cout«index«endl«endl;//continue;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	//output all pairs
	//for(int i = 0; i &amp;lt; index; i++){
		//cout&amp;lt;&amp;lt;basis_x[index]&amp;lt;&amp;lt;&quot; &quot;&amp;lt;&amp;lt;basis_y[index]&amp;lt;&amp;lt;&quot; &quot;&amp;lt;&amp;lt;basis_z[index]&amp;lt;&amp;lt;endl;
	//}
	
	
	//we now have our basis and we can now generate all S
	int *x_cov = new int[n+1];
	int *y_cov = new int[n+1];
	int *z_cov = new int[n+1];
	for(int i = 0; i &amp;lt;= n; i++){
		x_cov[i] = 0;
		y_cov[i] = 0;
		z_cov[i] = 0;
	}
	generatingS(basis_x,basis_y,basis_z,0,index,x_cov,y_cov,z_cov,0,n);
	
	
	delete [] basis_x;
	delete [] basis_y;
	delete [] basis_z;
	delete [] x_cov;
	delete [] y_cov;
	delete [] z_cov;
} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I only had the patience to run up to &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 17&lt;/code&gt;. I observed that there were many sets of max &lt;code class=&quot;highlighter-rouge&quot;&gt;|S|&lt;/code&gt; stored for each &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. Given the way the basis was derived and the recursive function ran, I decided to only filter for the first max &lt;code class=&quot;highlighter-rouge&quot;&gt;|S|&lt;/code&gt; printed for each &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;. Here are the first for &lt;code class=&quot;highlighter-rouge&quot;&gt;n=2&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;n=17&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;```
n=2:
2
0 0 2
1 1 0
n=3:
3
0 1 2
1 2 0
2 0 1
n=4:
3
0 0 4
1 1 2
2 2 0
n=5:
4
0 0 5
1 2 2
2 3 0
3 1 1&lt;/p&gt;

&lt;p&gt;n=6:
5
0 2 4
1 3 2
2 4 0
3 0 3
4 1 1&lt;/p&gt;

&lt;p&gt;n=7:
5
0 0 7
1 1 5
2 3 2
3 4 0
4 2 1&lt;/p&gt;

&lt;p&gt;n=8:
6
0 0 8
1 3 4
2 4 2
3 5 0
4 1 3
5 2 1&lt;/p&gt;

&lt;p&gt;n=9:
7
0 3 6
1 4 4
2 5 2
3 6 0
4 0 5
5 1 3
6 2 1&lt;/p&gt;

&lt;p&gt;n=10:
7
0 0 10
1 1 8
2 4 4
3 5 2
4 6 0
5 2 3
6 3 1&lt;/p&gt;

&lt;p&gt;n=11:
8
0 0 11
1 4 6
2 5 4
3 6 2
4 7 0
5 1 5
6 2 3
7 3 1&lt;/p&gt;

&lt;p&gt;n=12:
9
0 4 8
1 5 6
2 3 7
3 7 2
4 8 0
5 6 1
6 1 5
7 2 3
8 0 4&lt;/p&gt;

&lt;p&gt;n=13:
9
0 0 13
1 1 11
2 5 6
3 6 4
4 7 2
5 8 0
6 2 5
7 3 3
8 4 1&lt;/p&gt;

&lt;p&gt;n=14:
10
0 0 14
1 5 8
2 6 6
3 4 7
4 8 2
5 9 0
6 7 1
7 2 5
8 3 3
9 1 4&lt;/p&gt;

&lt;p&gt;n=15:
11
0 5 10
1 6 8
2 4 9
3 7 5
4 9 2
5 10 0
6 8 1
7 1 7
8 3 4
9 0 6
10 2 3&lt;/p&gt;

&lt;p&gt;n=16:
11
0 0 16
1 1 14
2 6 8
3 7 6
4 5 7
5 9 2
6 10 0
7 8 1
8 3 5
9 4 3
10 2 4&lt;/p&gt;

&lt;p&gt;n=17:
12
0 0 17
1 6 10
2 7 8
3 5 9
4 8 5
5 10 2
6 11 0
7 9 1
8 2 7
9 4 4
10 1 6
11 3 3
```&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;This once again does not tell us much other than the fact that there exists a combination with max&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;such that the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;’s can be ordered from &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; to some sort of limit. Is it guaranteed that for all n the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt;’s can be ordered? We will assume for now that the answer is yes. The pattern for the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; are not clear either. I decided to treat &lt;code class=&quot;highlighter-rouge&quot;&gt;y-z&lt;/code&gt; row values as coordinates on a &lt;code class=&quot;highlighter-rouge&quot;&gt;y-z&lt;/code&gt; plane and plot them. Here is a plot for &lt;code class=&quot;highlighter-rouge&quot;&gt;n=9&lt;/code&gt;:&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;-&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;th&gt;9&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;9&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;17&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The rows and column labels represent different potential values for &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; (first col is &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; values and first row is &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; values), the entries on &lt;code class=&quot;highlighter-rouge&quot;&gt;(y,z)&lt;/code&gt; coordinates is the sum: &lt;code class=&quot;highlighter-rouge&quot;&gt;y+z&lt;/code&gt;. This is done because as the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; column values increase one by one then, by definition, the sum of the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; entry must decrease by one. This can be observed visually on the graph as each highlighted number is unique. In addition, we know that all numbers in the &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; column are unique and therefore the values in the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; columns must also be unique. Graphically, this translates to no row or column having more than one circled number and the equal sum present in each (anti) diagonal corresponds to a specific x value since &lt;code class=&quot;highlighter-rouge&quot;&gt;x+y+z=n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We thus have translated our problem to a different, more visual one. Our translation is somewhat similar to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Eight_queens_puzzle&quot;&gt;Eight(N) queens puzzle&lt;/a&gt;: no highlighted-number/queen can appear in the same column/row/(antidiagonal) on the matrix/chessboard with no pieces below the main &lt;code class=&quot;highlighter-rouge&quot;&gt;y+z=n&lt;/code&gt; diagonal. This translation gives us more insight into the restrictions on the values in the triplets and really drives the point home that this problem is only in terms of &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we go back and plot from &lt;code class=&quot;highlighter-rouge&quot;&gt;n=2&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;n=18&lt;/code&gt; then one notices there is no pattern amongst the different &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;’s and no natural way to build up the solution. This is slightly disappointing because the printed &lt;code class=&quot;highlighter-rouge&quot;&gt;n=&lt;/code&gt; results were the first from max &lt;code class=&quot;highlighter-rouge&quot;&gt;|S|&lt;/code&gt; found in the brute force code. The hope is that by recording the first result, we would have had caught some sort of relation between the different &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Nonetheless, we know what the &lt;code class=&quot;highlighter-rouge&quot;&gt;|S|&lt;/code&gt; size is and have a very simple visual way of coming up with new potential solutions. The simple solution for all &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; followed the &lt;code class=&quot;highlighter-rouge&quot;&gt;n=9&lt;/code&gt; pattern (after playing around a bit with the different ‘n-chessboard’ it becomes clear). There are two diagonal like lines. Bottom one starts (bottom-left) at some number (for &lt;code class=&quot;highlighter-rouge&quot;&gt;n=9&lt;/code&gt; it is &lt;code class=&quot;highlighter-rouge&quot;&gt;(y,z)=(6,0)&lt;/code&gt;) and the consecutive entries in diagonal like line are located at &lt;code class=&quot;highlighter-rouge&quot;&gt;(y-1, z+2)&lt;/code&gt; all the way up until &lt;code class=&quot;highlighter-rouge&quot;&gt;y+z=n&lt;/code&gt;. The top diagonal like line starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;y&#39;=y-1&lt;/code&gt; from previous &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;y+z=n&lt;/code&gt;. The first(left-bottom most) &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; for top diagonal is &lt;code class=&quot;highlighter-rouge&quot;&gt;z=1&lt;/code&gt;. Top diagonal increases in same fashion as bottom one until bounds of ‘chessboard’ are hit.&lt;/p&gt;

&lt;p&gt;Our solution now does not depend on &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;z&lt;/code&gt; but on the left most number of the bottom row. If you plot out the ‘chessboards’ for first 10 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, then when will notice that the pattern is &lt;code class=&quot;highlighter-rouge&quot;&gt;mod 3&lt;/code&gt; and thus the &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; solution is formed:&lt;/p&gt;

&lt;p&gt;```
#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;&lt;/algorithm&gt;&lt;/iostream&gt;&lt;/vector&gt;&lt;/cstdio&gt;&lt;/cmath&gt;&lt;/p&gt;

&lt;p&gt;int main() {
    int n;cin»n;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int pairCount = 0;
vector &amp;lt;int&amp;gt; x_y_zPairsOrdered;
int y=0,z=0,x=0;
if(n%3==0){
    y=(2*n)/3 ; 
}
else if(n%3==1){
    y=(2*n - 2) /3 ;
}
else{//n%3==2
    y=( 2*n-1 )/3;
}

//bottom diagonal from left to right
do{
    x=n-y-z;
    x_y_zPairsOrdered.push_back(x);
    x_y_zPairsOrdered.push_back(y);
    x_y_zPairsOrdered.push_back(z);
    y-=1;
    z+=2;
    pairCount++;
}while(y+z &amp;lt;= n);

//upper diagonal from left to right
z=-1;
for(;y &amp;gt;= 0;y--){
    z+=2;
    x=n-z-y;
    pairCount++;
    x_y_zPairsOrdered.push_back(x);
    x_y_zPairsOrdered.push_back(y);
    x_y_zPairsOrdered.push_back(z);
}


//output:
cout&amp;lt;&amp;lt;pairCount&amp;lt;&amp;lt;endl;
for(int i = 0; i &amp;lt; pairCount; i++){
    cout&amp;lt;&amp;lt;x_y_zPairsOrdered[i*3]&amp;lt;&amp;lt;&quot; &quot;;
    cout&amp;lt;&amp;lt;x_y_zPairsOrdered[i*3+1]&amp;lt;&amp;lt;&quot; &quot;;
    cout&amp;lt;&amp;lt;x_y_zPairsOrdered[i*3+2]&amp;lt;&amp;lt;&quot; &quot;;
    cout&amp;lt;&amp;lt;endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The main idea I wanted to push in this article is that in order to solve complex problems such as the ones present in hackerrank, it is OK to take a two step approach and brute it on your machine first. It is OK to try a stupid solution first. It is all about discovery.&lt;/p&gt;

&lt;p&gt;Sometimes it is sufficient to simply work through some examples by hand to notice a pattern when solving these problems. However, sometimes that can be difficult to do and verify correctness of and a two step solution can help crack the problem.&lt;/p&gt;

&lt;p&gt;Unfortunately, this tip is not the silver/magic bullet to solving ‘Hard’ problems on hackerrank. Oftentimes, the input to the problem is hard to formulate to begin with (like some graph with complex properties). In our case, we were just given a number n, which is easy to generate as input and easy to generate potential output for and test for correctness. Nonetheless, this approach gave me the opportunity to solve the problem by myself and learn something new during the process. That is always welcome.&lt;/p&gt;

</description>
        <pubDate>Fri, 14 Jul 2017 16:44:00 -0400</pubDate>
        <link>/programming/2017/07/14/Beautiful-3-set/</link>
        <guid isPermaLink="true">/programming/2017/07/14/Beautiful-3-set/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Some graphs</title>
        <description>&lt;p&gt;I was looking for sets of data to play around with and I came across the &lt;a href=&quot;http://www.wrps.on.ca/inside-wrps/corporate-planning-systems&quot;&gt;Waterloo Regional Police Service&lt;/a&gt; data that is available to the public. I created some graphs of the data for the reader to check out. The data was filtered for vehicle stops for the year 2015. Time and location data was plotted. If you are interested in the scripts used in generating the plots, then let me know.&lt;/p&gt;

&lt;p&gt;The following image contains a sort of histogram that placed the stops in bins based on their time of day occurence in a 24 hour time span.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/average_day_frequency.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next image is similar to the previous one, except now it places the stops in bins based on the day of the year in a one year span.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/year_frequency.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next few images are of the location based frequency of vehicle stops based on an entire year.&lt;/p&gt;

&lt;h6 id=&quot;tri-city-area&quot;&gt;Tri-city area:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/location.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;waterloo-area&quot;&gt;Waterloo area:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/waterloo_zoom.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;cambridge-area&quot;&gt;Cambridge area:&lt;/h6&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cambridge_zoom.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It can be hard to appreciate the number of stops done throughout the year by looking at the maps or previous histograms. The actual number of stops is over 40000. I will let the user make ‘conclusions’ on their own. The purpose of the post was not for analysis but instead for a small example of visualization and turning a huge csv file into a some neat graphs and plots. I will also provide the disclaimer for the users to go to the &lt;a href=&quot;http://www.wrps.on.ca/inside-wrps/corporate-planning-systems&quot;&gt;Waterloo Regional Police Service&lt;/a&gt; website if they want to learn more about the data and its limits.&lt;/p&gt;

</description>
        <pubDate>Tue, 14 Mar 2017 20:27:00 -0400</pubDate>
        <link>/programming/2017/03/14/Some-graphs/</link>
        <guid isPermaLink="true">/programming/2017/03/14/Some-graphs/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Pendulums and automation</title>
        <description>&lt;p&gt;There will be two topics to this post. The first one will be about pendulums and the second one will be about automation. The topics aren’t related, but I put them together anyways. I hope you enjoy reading about them!&lt;/p&gt;

&lt;h2 id=&quot;pendulums&quot;&gt;Pendulums&lt;/h2&gt;

&lt;p&gt;Up to this current point, I have taken a few courses that deal with simple harmonic motion. PHYS 121, PHYS 122, AMATH 251, AMATH 351 are only some of the courses that have covered this topic. It occurs so frequently in my AMATH courses that I thought it would very selfish of me to hord all the knowledge to myself.&lt;/p&gt;

&lt;p&gt;Simple harmonic motion is used to model periodic motion, motion that repeats itself after a set period of time. Some examples would be a spring or a pendulum. In applied mathematics there is an attraction to this subject as simple harmonic motion occurs all over the place. Starting off and understanding something simple as the pendulum, we can work on tackling more complicated problems.&lt;/p&gt;

&lt;p&gt;When we think about a simple pendulum, we think of a string attached to a pivot on one end and a heavy mass attached on the other $($assuming string has no mass$)$. Something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pendulum.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since we are talking about applied mathematics here, then we need some sort of equation to work with. So how does one turn the pendulum motion into an equation?&lt;/p&gt;

&lt;p&gt;One thing we can start off with is the $F = ma$ equation $($Newton’s third law$)$. The $F$ is the net force and in our case will be the force acting on the mass hanging on to the string, $m$ the mass and $a$ the acceleration of the mass. Since we are dealing with the pendulum then what we will be using to keep track of position will be the angle $(&lt;script type=&quot;math/tex&quot;&gt;\theta&lt;/script&gt;)$ of the string from the pendulum’s equilibrium position. We now upgrade our image to the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/updated_pendulum.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To understand the net force on the mass, we need to consider all the forces acting on the mass. These forces will be gravity and tension of the string. By understanding the forces acting upon the mass we can then understand the motion induced by the forces:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/forces_pendulum.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The black force is caused by tension of the string and the blue force is caused by gravity. The gravity force can be broken down to the two red forces with the help of geometry. Since the mass on the string is not flying off the string then it must be the case that $F_g cos(\theta) = F_T$ and they cancel each other out. Therefore, the net force is $F = - mg sin(\theta)$.&lt;/p&gt;

&lt;p&gt;For the angle, $\theta$ is the angle, then velocity is $\theta’$ and acceleration is $\theta’’$. If we want to consider the amount of distance the mass on the pendulum covered with a change of $\theta$ in the angle, then the distance must be the arc length covered by the motion - which would be $\theta l$ where $l$ is the length of the string $($ if the pendulum was to do a full rotation, then that would be the circumference of a circle of radius - $l$, $2 \pi l$ $)$. Therefore the acceleration with respect to position $($not angle$)$ must be $l \theta’’$. Using all this information we can derive the following:&lt;/p&gt;

&lt;p&gt;$F = ma$&lt;/p&gt;

&lt;p&gt;$- m g sin(\theta) = m l \theta’’$&lt;/p&gt;

&lt;p&gt;$ - g sin(\theta) = l \theta’’$&lt;/p&gt;

&lt;p&gt;$ \theta’’ + \frac{g}{l}sin(\theta) = 0$&lt;/p&gt;

&lt;p&gt;What we have derived is a differential equation for the motion of the pendulum. There is some sort of function $\theta$ that describes the angle of the pendulum from equilibrium as a function of $t$, time. Now whatever that function may be, it must satisfy out derived differential equation. One thing we can observe from our equation is that it does not depend on mass $($ no matter what the mass is on the pendulum, the motion will not be changed $)$. We will now work on solving this equation.&lt;/p&gt;

&lt;p&gt;One way we can solve this differential equation is by getting rid of the $sin$. We can use the fact that for small $\theta$, $\theta ~= sin(\theta)$. This transforms our differential equation to: $\theta’’ + \frac{g}{l}\theta = 0$ for which the solution is of the form $\theta = A sin(\sqrt(\frac{g}{l}) + B cos(\sqrt(\frac{g}{l}))$ where $A$ and $B$ are constants.&lt;/p&gt;

&lt;p&gt;If we decide to solve the original equation with the $sin$ we might as well work on approximation techniques in order to save some time. One well known method is called the Euler method. In the Euler method we have an expression for the derivative of the form $y’ = f(t,y(t))$ and a starting point $y_0$ where $y(t_0) = y_0$. If we recall, $y’$ is the slope of the tangent of the curve $y$. Using the slope and the starting point $y_0$, we can approximate for the next value of the function, $y_1$ at $t = t_0+\delta t$ as  $y(t_0 + \delta t) = y_1 = y_0 + f(t_0,y_0)\delta t$. Here is a great image from Wikipedia to help visualize the explanation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/euler_method.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Euler method can be extended to our differential equation as well. I employed the Euler method, the $sin$ approximation  as well as a different method called the RK4 ~ Runge-Kutta to the pendulum problem in order to help visualize the approximation techniques right over &lt;a href=&quot;/pendulum/simple_pendulum/index.html&quot;&gt;here&lt;/a&gt;. The RK4 is the most accurate, closely followed by the Euler and then finally the small $\theta$ approximation. You can play around with the initial conditions to see the differences in approximation. For the most part, the approximations match each other fairly well, but for some initial values they really differ $($ I recommend setting angle ~ 236, dtheta - 15, damping - 0, length - 150, gravity - 9.8 and selecting all the  approximation techniques$)$. The application also has the damping setting that you can play around with. I won’t say much about it as you can discover for yourself what it does.&lt;/p&gt;

&lt;p&gt;$($There is another part to the web app for the spring pendulum that I haven’t yet finished. It will be finished for another post.$)$&lt;/p&gt;

&lt;h2 id=&quot;automation&quot;&gt;Automation&lt;/h2&gt;

&lt;p&gt;Something neat I discovered a while back is Google App Scripts $($GAS$)$. As Google describes it, it is: “a JavaScript cloud scripting language that provides easy ways to automate tasks across Google products and third party services and build web applications.” Basically, GAS can be used to connect the different Google services $($like Google Sheets$)$ to your creativity with a little bit of scripting. You can use GAS for many many &lt;a href=&quot;http://www.labnol.org/internet/google-scripts/28281/&quot;&gt;things&lt;/a&gt;. One thing that we are going to build together today is a birthday email bot.&lt;/p&gt;

&lt;p&gt;The motivation behind this example is that it is a great introduction to GAS and a potential real world application. I noticed one of my friends on Facebook opening up one of those ‘3 friends have a birthday today’ notifications and then typing up a lame ‘Happy Birthday!’ to each person. It didn’t look like it was sincere and felt like a chore. Why not automate this?&lt;/p&gt;

&lt;p&gt;If you think that automating this sounds a little cheap then consider the fact that the amount of time you will spend creating the sender will put more thought and time in to those emails for years to come.&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting up&lt;/h3&gt;

&lt;p&gt;I will assume the reader has a Google account and is remotely familiar with Google Drive. You will need to create a new Google Sheet. In the Google sheet, fill it up in the following manner $($with the birthdays of people you know$)$:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/birthdays_sheet.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first row is for the column titles and the rest of the rows is for the data. The data in the rows does not have to be organized in any particular order.&lt;/p&gt;

&lt;p&gt;Once you have done that, go to &lt;em&gt;Tools &amp;gt; Script Editor…&lt;/em&gt; and enter the following code $($and then save it$)$.&lt;/p&gt;

&lt;p&gt;```javascript
function checkReminder(){
  // get the spreadsheet object
  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  // set the first sheet as active
  SpreadsheetApp.setActiveSheet(spreadsheet.getSheets()[0]);
  // fetch this sheet
  var sheet = spreadsheet.getActiveSheet();&lt;/p&gt;

&lt;p&gt;// figure out what the last row is
  var lastRow = sheet.getLastRow();&lt;/p&gt;

&lt;p&gt;// the rows are indexed starting at 1, and the first row
  // is the headers, so start with row 2
  var startRow = 2;&lt;/p&gt;

&lt;p&gt;//get today’s month and date
  var dateData = getMonthAndDay(new Date());
  var month = dateData[0];
  var day = dateData[1];&lt;/p&gt;

&lt;p&gt;//get tomorrows month and date
  var today = new Date();
  var tomorrow = new Date();
  tomorrow.setDate(today.getDate()+1);&lt;/p&gt;

&lt;p&gt;var tomorrowDateData = getMonthAndDay(tomorrow);
  var tomorrowMonth = tomorrowDateData[0];
  var tomorrowDay = tomorrowDateData[1];&lt;/p&gt;

&lt;p&gt;//get the data in the spreadsheet to loop over
  var range = sheet.getRange(2,1,lastRow-startRow+1,5 );
  var numRows = range.getNumRows();
  var data = range.getValues();&lt;/p&gt;

&lt;p&gt;//for all the rows with data
  for (var i = 0; i &amp;lt;= numRows - 1; i++) {
    //get the month and date
    var m = data[i][0];//columns start indexing at zero unlike rows
    var d = data[i][1];
    //if today’s month and date matches the rows month and date —&amp;gt; then it means it is the person’s birthday
    if(m==month&amp;amp;&amp;amp;d==day){//it is the person’s birthday
      //Then shoot the person an email!
      MailApp.sendEmail(“your email in quotation marks”,data[i][4], “Happy Birthday EMAIL TITLE”, “MAKE YOUR OWN BDAY BODY MESSAGE”);
    }//if tomorrow is the row’s date and month, then it means it is the person’s birthday tomorrow —&amp;gt; shoot yourself a warning message
    else if(m==tomorrowMonth&amp;amp;&amp;amp;d==tomorrowDay){
      MailApp.sendEmail(“your email in quotation marks”, “Birthday automation warning.”, “Birthday of “+data[i][2]+” is tomorrow.”);
    }
  }
};&lt;/p&gt;

&lt;p&gt;//for a given Date object return the Month and date
function getMonthAndDay(d){
  var month = new Array();
  month[0] = “January”;
  month[1] = “February”;
  month[2] = “March”;
  month[3] = “April”;
  month[4] = “May”;
  month[5] = “June”;
  month[6] = “July”;
  month[7] = “August”;
  month[8] = “September”;
  month[9] = “October”;
  month[10] = “November”;
  month[11] = “December”;
  var n = month[d.getMonth()]; 
  return [n,d.getDate()];
}&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;I have added comments throughout the code in order to help explain it. The code essentially checks the spreadsheet and checks if today’s date matches a date on the sheet. If there is a match then it sends the person a happy birthday email. If the person’s email is tomorrow then it sends you a warning in advance $($ in case you want to do something more than just an email $)$. $($If you have a friend who has a birthday on Feb 29 then you might have to do some extra thinking :$)$  $)$.&lt;/p&gt;

&lt;p&gt;Since we want to automate this process and have it run everyday then we still have some work to do. You need to go to &lt;em&gt;Resources &amp;gt; All your triggers&lt;/em&gt;, Add a new trigger and set it to Time-driven, Day timer between 7-8am and press save. Then go to &lt;em&gt;Publish &amp;gt; Deploy as Web App…&lt;/em&gt; and give the app the permissions it needs. There you go! You have created your very own birthday bot.&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Dec 2016 19:27:00 -0500</pubDate>
        <link>/programming/2016/12/20/pendulum/</link>
        <guid isPermaLink="true">/programming/2016/12/20/pendulum/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Piano Robot</title>
        <description>&lt;p&gt;Back in September, I had the wonderful opportunity to participate in my first hackathon at Hack the North. It was nice to see so many enthusiastic people filled with ideas and talent all concentrated in one area. The keynote speaker: Vinod Khosla, presented his opinions and experiences that were inspiring to see. I especially enjoyed his views on focus and motivation from his life with which he achieved great success. A video of the interview is &lt;a href=&quot;https://www.youtube.com/watch?v=0FNsFPjdm5U&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the hackathon, I worked with Michael Li and Joe Seng. We decided to create something physical instead of an app. We wanted to create a robot that did something on its own without any assistance. We settled on the idea of building a robot that played on a piano. For the robot, we used a couple of sets of &lt;a href=&quot;https://en.wikipedia.org/wiki/Lego_Mindstorms&quot;&gt;lego mindstorm&lt;/a&gt; kits we had laying around.&lt;/p&gt;

&lt;p&gt;When we started the project we did not realize how difficult it would be to get the motions of the robot down. Having the robot press a single key with consistent results or even different keys were two problems that took hours to solve. Our lack of lego building skills came to light early on and gave us a little bit of frustration. However, there were tons of moments of laughter during our tests where the robot aggressively tried to press the keys and ended up spinning out of control.&lt;/p&gt;

&lt;p&gt;We imagined that most of the time in the project would be spent writing up the code for the robot to play different melodies, but that was not the case. The construction of the robot took up so much time that I can proudly say that I took part in the “don’t sleep” hackathon tradition.&lt;/p&gt;

&lt;p&gt;Here is a picture of our robot during construction:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/legoBot.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is a &lt;a href=&quot;https://www.youtube.com/watch?v=er5BoZVnoGs&amp;amp;feature=youtu.be&quot;&gt;video&lt;/a&gt; of our robot in action.&lt;/p&gt;

&lt;p&gt;One thing I learned is that debugging robots is very different from debugging code and mainly in its difficulty. When testing your code you can ( and you SHOULD ) create test cases and run them through your code. Every time you modify your code, you can rerun your test cases to see if your code produces the correct output to the specified input. This process is (usually) straightforward to set up and to automate.&lt;/p&gt;

&lt;p&gt;In the case of a robot, you still have certain desired input-output sequences you are trying to achieve. However, you now have a lot more work in making sure your testing environment is consistent. The slightest change (as our group observed) can screw everything up. A slight shift of the robot’s position as a result of pressing piano keys in the previous test will make the same test’s rerun results completely different and unpredictable. Without the proper equipment/resources, achieving consistency is very difficult. I imagine that with the proper setup, the testing process for robots can be made to be similar to that of coding, but it would require a lot more effort in our case. (I do realize that this explanation is not completely bulletproof as code and their respective environments can get very complex as well - think concurrent and parallel programming for an example.)&lt;/p&gt;

&lt;p&gt;This was my brief story of making a piano playing robot. I used to play a lot on the piano when I was younger, so it was somewhat interesting automating tunes that I used to play as a kid. By making this connection to automation, I immediately thought back to the ideas Vinod Khosla presented on artificial intelligence. The thoughts were promising on the potential of technology and how it can change our future and many aspects of our life.&lt;/p&gt;

&lt;p&gt;At this moment, it is hard to predict or to fully appreciate how new technology will affect the future and our reaction to it. At least, in terms of robots and music, I think there is lots of room for creativity. However, with my past experience with music, I will still look for that human connection, effort and talent to fully enjoy and connect with music.&lt;/p&gt;
</description>
        <pubDate>Sat, 19 Nov 2016 19:27:00 -0500</pubDate>
        <link>/programming/2016/11/19/piano-robot/</link>
        <guid isPermaLink="true">/programming/2016/11/19/piano-robot/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Winter Research</title>
        <description>&lt;p&gt;A lot of data nowadays is stored online or in the ‘cloud’, separating clients and servers by kilometres upon kilometres of distance. The client moves their data to a server with more memory and speed to be able to compute things in the cloud at rates faster than they could ever do so by themselves. The client storing the data on the server has to be able to trust the server and that the server is uncompromised in order to keep their information secure. Ways in which this can be done will be discussed in this post.&lt;/p&gt;

&lt;p&gt;Back in December I have worked as a URA for Assistant Professor &lt;a href=&quot;https://cs.uwaterloo.ca/~sgorbuno/&quot;&gt;Sergey Gorbunov&lt;/a&gt; of University of Waterloo in the area of secure storage of information in the cloud. The task was to measure and evaluate different techniques commonly used in cloud based storage as well as to explore the emerging field of searchable symmetric encryption.&lt;/p&gt;

&lt;p&gt;The model used for testing is a very simple client-server model. The server stores many text files and provides clients with the ability to search/query the files containing requested words/phrase. Here is an illustration below (figure 1):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/regular_search.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There were two techniques tested in the model. The first involved simply storing the data on server without any modification (same as in the picture above) whereas the second approach involved storing the files in an encrypted format. An encrypted file was a mapping of the original text file where every word was individually encrypted using the same key with preserved order overall. Here is an illustration of a mapping (figure 2):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/encryption_of_file.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The encryption in the example above was completely made up by me to help explain the file transformation (we can discuss the actual encryption details a little later). However, one thing I do want the reader to observe in my made up example is that “abc” recorded twice in file1.txt gets mapped on to “xxyxasd” twice with the order preserved. In fact, all the files stored on server are encrypted in such a way that “abc” in file1 and file2 would map to “xxyxasd” in encrypt_file1 and encrypt_file2 in the same order that they originally appeared.&lt;/p&gt;

&lt;p&gt;Now that we have our encrypted files stored on server, how do we execute search as shown in figure 1?&lt;/p&gt;

&lt;p&gt;Since we only have the encrypted files stored on server we can’t search for “abc” on the server directly anymore since it has “xxyxasd” in its original place. Hence we have to be able to encrypt our search word in advance before sending it to the server. Our encrypted client-server model now looks something like this when searching for “abc” (figure 3):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/encrypted_send.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The actual encryption used in my model was AES - ECB mode where a given plaintext is divided into blocks and each block is encrypted individually.&lt;/p&gt;

&lt;h4 id=&quot;comparing-the-techniques-at-a-glance&quot;&gt;Comparing the techniques at a glance&lt;/h4&gt;

&lt;p&gt;The first technique is the simplest as it does not change the original data. Anyone with this information can easily read and interpret it. The downside is that the files stored on the server are stored in an unencrypted format meaning that anyone with access to the server can view the data. The intended users of the server have to be confident in the security of the server.&lt;/p&gt;

&lt;p&gt;The second technique is the encrypted format. The data on the server cannot be easily read and interpreted but involves more time in initial encryption setup as well as decryption upon data retrieval. From this setup we can already get a sense that there is a little more work involved in handling the data.&lt;/p&gt;

&lt;h4 id=&quot;comparing-the-techniques-with-an-experiment&quot;&gt;Comparing the techniques with an experiment&lt;/h4&gt;

&lt;p&gt;I went on to set up the two techniques in order to be able to compare the two to each other. Here are the details:&lt;/p&gt;

&lt;p&gt;The server-client in the project was to model a health info-patient setup. 16.5MB worth of formatted health related 2270 articles from Wikipedia were downloaded and stored on the server using Elasticsearch. In addition, 1197 health related queries were sourced from the &lt;a href=&quot;https://en.wikipedia.org/wiki/AOL_search_data_leak&quot;&gt;AOL leak&lt;/a&gt; for use by the client.&lt;/p&gt;

&lt;p&gt;The client would send the queries, to the server (ran on uwaterloo server) to then receive the top 20 matches of articles (if there were any). The queries would return the documents that contained the individual words that best matched the query. The search algorithm on the server/Elasticsearch provided a degree of approximation to the words/phrases to accommodate for spelling mistakes and over-specific queries (similar to what google search does). In the case of encryption, the Wikipedia articles were first encrypted before being stored on server and the queries from client were first encrypted before sent on to the server.&lt;/p&gt;

&lt;p&gt;Further details on implementation can be found here: &lt;a href=&quot;https://github.com/mannyray/es_basic_encryption&quot;&gt;https://github.com/mannyray/es_basic_encryption&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;comparing-the-numbers&quot;&gt;Comparing the numbers&lt;/h4&gt;

&lt;p&gt;The initial Wikipedia articles were 16.5 MB in size, which when encrypted, inflated to about 85MB. The expansion of data was expected as the string ‘a’ could end up being encrypted into ‘0x731b31922c9228465e0f0ea51ea7f’ (hex format). This humble sample size was used to get a basic comparison and understanding of the two methods of data storage.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Accuracy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Some queries were expected to be unmatched since the queries could have been too specific or out of range for the limited data present in database. After storing the data on Elasticsearch and querying the results for regular storage the server was able to match for 42% of the time and for the encrypted 34% of the time. The discrepancy was expected since it is impossible to approximate spelling with encrypted words. Further analysis of the mismatch proved this theory showing that only 0.25% queries were matched only for encrypted(not regular) and 7.6% only for regular.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Query time&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The query time on Elasticsearch was much greater for the encrypted version. In fact, 79% were faster for regular text and an additional 5% were slower for regular only because encrypted could not match anything at all while regular could. The average query time for regular was 2.64ms and 6ms for encrypted. Here is a cdf of the times (blue for regular and red for encrypted ~ showing that regular has the speed advantage) where x is time in milliseconds:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cdf.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The regular (blue) technique can be observed to be much faster than encrypted version.&lt;/p&gt;

&lt;h4 id=&quot;discussion&quot;&gt;Discussion&lt;/h4&gt;

&lt;p&gt;Both methods of storing data, encrypted vs unencrypted, each have their respective benefits and drawbacks in the categories of speed, security and usability.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Speed:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Speed is a major concern when storing/retrieving data. For a large company with many servers and many clients, good speed would be crucial in running a successful operation. With encryption we saw a significant slowdown in search time as well as a significant inflation in data size. In a real life situation this would translate to more memory expense and time to execute queries.&lt;/p&gt;

&lt;p&gt;The unencrypted format is compact and fast. It would not require the data to be encrypted ahead of time for storage or decryption upon data retrieval from server, saving even more time overall.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Security:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is no doubt that unecrypted is insecure. It has to be to stored in a safe location or deemed to be safe for everyone to see. However, ‘stored in a safe location’ can go wrong, as seen in the &lt;a href=&quot;http://www.theglobeandmail.com/news/british-columbia/hard-drive-with-personal-info-on-34-million-bc-and-yukon-students-lost/article26478731/&quot;&gt;BC data leak&lt;/a&gt; and the AOL leak (used in this experiment).&lt;/p&gt;

&lt;p&gt;The encrypted version in this scenario encrypts every word individually before storing the documents. Unfortunately, this is only slightly more secure than the unecrypted version since the encrypted version is susceptible to a frequency analysis (&lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_cryptography#Medieval_and_Renaissance_cryptography&quot;&gt;one of the oldest decryption attacks&lt;/a&gt;). For example, if one of our encrypted files has ‘0x872343…..a98’ as the most frequent word then we can take an educated guess and say that this matches with the word ‘the’ (a very frequent English word) and continue working this way until we have cracked the overall text to a meaningful message.&lt;/p&gt;

&lt;p&gt;A potential fix to this: the encrypted version would have had to change the encryption of identical words by using a counter to incorporate into the IV of AES encryption which would make all version of the same encrypted word different. This would make it secure from frequency analysis but would greatly increase search time overall as you now have to search for all versions of the encrypted word (and know how many there are in advance).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Usability:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Finally, usability is also an issue when it comes to data storage. It is the most easiest to store and use the data in an unecrypted format. Whereas the encrypted format is very rigid and hard to analyse as was shown in the accuracy section previously. The speed also plays a role in usability where the encrypted speed is very unattractive.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To conclude it is worth to say that both encrypted and unecrypted formats have their advantages and disadvantages as this experiment was able to show. Encrypted provides more security while unecrypted provides ease and speed of use. A perfect blend of both is desirable to provide the best of both worlds to the user. One of the areas of research covering this blend is searchable symmetric encryption (sse). Techniques in sse protect the data from the unwanted eye but give the ability of more ease of search for the intended user. The area of research is relatively new and is growing rapidly with lots of information online for the curious reader.&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Sep 2016 17:56:00 -0400</pubDate>
        <link>/programming/2016/09/12/winter-research/</link>
        <guid isPermaLink="true">/programming/2016/09/12/winter-research/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Triplets</title>
        <description>&lt;p&gt;Hello reader! If you’re not a fan of reading about programming puzzles then feel free to skip &lt;a href=&quot;#skipprog&quot;&gt;ahead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have spent a fair bit of my recent free time solving coding puzzles for fun. The reason for solving these puzzles is to stay sharp on algorithms, data structures and language syntax (C++ for now) as my upcoming school semester is going to be computer science course free. I also can’t forget to mention the main reason: to experience the sweet sweet feeling of ecstasy when you solve a puzzle after a few hours of thinking, coding and debugging.&lt;/p&gt;

&lt;p&gt;I have started with &lt;a href=&quot;https://www.hackerrank.com/faq&quot;&gt;hackerrank&lt;/a&gt; as it has a vast collection of puzzles you can solve and keep track of your progress with respect to other users on the website. The puzzles are organized by the domain of expertise required to solve them with varying levels of difficulty - from very basic to insane. Hackerrank provides the user with the ability to code up their solution (usually in the language of their choice) to the puzzle and submit it for testing to get immediate feedback. If the user’s solution passes all the provided test cases then the user is considered to have solved the problem and gets points for it (let us take the time to remember that passing all the test cases does not mean that the solution is necessarily correct {you could have always missed an edge test case} ~ you need a formal mathematical proof for that).&lt;/p&gt;

&lt;p&gt;Oftentimes the problems have a very basic brute force solution that are very slow computation wise. However, hackerrank prevents you from submitting these types of solutions as their servers have tight time limits and large inputs for your solutions and thus they push you to do some extra thinking in order to avoid the brute approach.&lt;/p&gt;

&lt;p&gt;I thought for this blog post I would present my solution to the &lt;a href=&quot;https://www.hackerrank.com/challenges/triplets&quot;&gt;triplets&lt;/a&gt; puzzle from hackerrank in order to share my solution, practice explaining my train of thought in written form and maybe infect the user with a desire of solving puzzles.&lt;/p&gt;

&lt;p&gt;I will do my best to assume minimal experience with computer science related knowledge. This will probably add even more confusion for which I apologize in advance.&lt;/p&gt;

&lt;h3 id=&quot;puzzle-description&quot;&gt;Puzzle description&lt;/h3&gt;

&lt;p&gt;The puzzle description is very short and I will just paste it from the website:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;There is an integer array which does not contain more than two elements of the same value. How many distinct ascending triples (d[i] &amp;lt; d[j] &amp;lt; d[k], i &amp;lt; j &amp;lt; k) are present?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The puzzle description may be short but it tells us a lot of information. Let’s start with an example array &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
d = [1 1 2 2 3 4]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The distinct ascending triples for &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; are:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
(1,2,3)
(1,2,4) 
(1,3,4) 
(2,3,4)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so therefore there are 4 triples present.&lt;/p&gt;

&lt;p&gt;In our example the first triple &lt;code class=&quot;highlighter-rouge&quot;&gt;(1,2,3) = (d[0 or 1],d[2 or 3], d[4]), 0 or 1 &amp;lt; 2 or 3 &amp;lt; 4&lt;/code&gt; assuming we start indexing &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; at 0. The &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt; in the indexing choice tells us that there are technically more than one triple of ascending triples with different indexing that work up to being &lt;code class=&quot;highlighter-rouge&quot;&gt;(1,2,3)&lt;/code&gt;, but we are only looking for &lt;em&gt;distinct&lt;/em&gt; triples.&lt;/p&gt;

&lt;h3 id=&quot;reaching-the-solution&quot;&gt;Reaching the solution&lt;/h3&gt;

&lt;h5 id=&quot;attempt-1&quot;&gt;Attempt 1&lt;/h5&gt;

&lt;p&gt;For the test case discussed above one may notice that the array is already in ascending order. In fact if we knew that they array would always be in ascending order then all we would have to do is let &lt;code class=&quot;highlighter-rouge&quot;&gt;n = # of unique numbers in d&lt;/code&gt; and output &lt;code class=&quot;highlighter-rouge&quot;&gt;n choose 3&lt;/code&gt; (all possible combinations of choosing 3 random numbers from n numbers ~ order of selection not mattering).&lt;/p&gt;

&lt;p&gt;However, the array being ordered is not guaranteed and even with the same numbers in an array but different order we can get different results. Consider the numbers:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
1 2 3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;d = [ 2 3 1 ]&lt;/code&gt; we get 0 distinct triples whereas if &lt;code class=&quot;highlighter-rouge&quot;&gt;d = [ 1 2 3 ]&lt;/code&gt; we get 1 triple.&lt;/p&gt;

&lt;h5 id=&quot;attempt-2&quot;&gt;Attempt 2&lt;/h5&gt;

&lt;p&gt;Since order matters we can get a sense that the solution as it is parsing the array number by number sequentially needs to keep track of the past data. One thing it can keep track of is the numbers that are to the left of it and smaller. Since we are processing the numbers sequentially and looking at the past then the current number being processed must be treated as a potential candidate for the third position in a triple as we have no way of looking forward.&lt;/p&gt;

&lt;p&gt;However, if we think carefully then we can come up with a set of test cases that would stump our current approach. Let us say that the array &lt;code class=&quot;highlighter-rouge&quot;&gt;d = [ x y 3 ]&lt;/code&gt; where we are currently processing &lt;code class=&quot;highlighter-rouge&quot;&gt;d[2] = 3&lt;/code&gt; element. We are now looking at the number of elements &lt;code class=&quot;highlighter-rouge&quot;&gt;d[i], i &amp;lt; 2&lt;/code&gt; where &lt;code class=&quot;highlighter-rouge&quot;&gt;d[i] &amp;lt; d[2]&lt;/code&gt; (looking at all the numbers that come before 3 such that they are smaller than itself).&lt;/p&gt;

&lt;p&gt;If at least one of &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; is bigger than 3 then our approach tells us that there are not enough numbers before &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; to form a triple with &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; as the last element. This is the correct answer.&lt;/p&gt;

&lt;p&gt;Now if both &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; are smaller than &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; then we are in trouble. There are two possibilities: &lt;code class=&quot;highlighter-rouge&quot;&gt;x &amp;lt; y&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;x &amp;gt;= y&lt;/code&gt;, but there is currently no way for &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt; to tell which one is true. The former should give one triple and the latter should give 0. Our current approach is left up to guessing the answer. This definitely would not scale well. It turns out we still are not handling the concern of order.&lt;/p&gt;

&lt;h5 id=&quot;attempt-3&quot;&gt;Attempt 3&lt;/h5&gt;

&lt;p&gt;To get over our previous stump we either have to be able back track in the array (which sounds like too much work) or we can process the data differently.&lt;/p&gt;

&lt;p&gt;One way of going through the list differently is to treat the current number being processed as the middle candidate for a triple. This will allow us to avoid the problem of figuring out the ordering of the first two numbers. We now will only care about which numbers are smaller and to the left of current number and the numbers which are to the right and bigger of the current number. The trade off here is that we will have to now be able to look ahead in the list in addition to looking back. This implies that the array will have to be processed at least once in advance for us to have this ability.&lt;/p&gt;

&lt;p&gt;If the current number &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; has a total &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; numbers before that are smaller than it and &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; numbers after &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; that are bigger than it then we can figure out the total count of triples with &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; as the middle number. This number must be &lt;code class=&quot;highlighter-rouge&quot;&gt;a * b&lt;/code&gt;. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;d = [ 3 2 4 8 7 ]&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 4&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;a = 2&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;b = 2&lt;/code&gt; meaning that we get &lt;code class=&quot;highlighter-rouge&quot;&gt;a * b = 4&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(3,4,8),(3,4,7),(2,4,8),(2,4,7)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we iterate through all the numbers in the list and sum up all of the &lt;code class=&quot;highlighter-rouge&quot;&gt;a * b&lt;/code&gt; products then we should get the total number of distinct triples … well almost. One thing we have not considered at all so far is the &lt;em&gt;“does not contain more than two elements of the same value”&lt;/em&gt; phrase from the initial problem statement. The case &lt;code class=&quot;highlighter-rouge&quot;&gt;d = [ 1 1 2 4 ]&lt;/code&gt; would not work well for our current approach (since for &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 2&lt;/code&gt; there are two numbers smaller than it and to the left, but they are the same number ~ something our algorithm cannot currently distinguish).&lt;/p&gt;

&lt;h5 id=&quot;attempt-4&quot;&gt;Attempt 4&lt;/h5&gt;

&lt;p&gt;The two element issue we will discuss a little bit later. For now let us consider the specifics of “keeping track” of past data. We have mentioned it a number of times but we never discussed the details. How do we keep track of the numbers that are smaller and to the left of a number in an array?&lt;/p&gt;

&lt;p&gt;One way is to go and parse all the numbers to the left one by one and count that numbers that match our description ( a little too slow).&lt;/p&gt;

&lt;p&gt;A better method is to construct a modified binary search tree. &lt;a href=&quot;https://en.wikipedia.org/wiki/Binary_search_tree&quot;&gt;If you don’t know what a binary search tree is then please read more about it&lt;/a&gt;. I apologize for this extra reading, but it saves me from typing up a LOT of stuff.&lt;/p&gt;

&lt;p&gt;There is a very important property of binary search trees that you should be aware of: &lt;a href=&quot;http://research.cs.queensu.ca/~jstewart/applets/bst/bst-property.html&quot;&gt;“for a node with key k , every key in the left subtree is less than k and every key in the right subtree is greater than k”&lt;/a&gt;: Let us consider the following binary search tree:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/binary_tree.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let us assume the current number we are processing and just inserted into the tree is &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;, meaning that all the numbers to the left of &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; have already been inserted into the tree. How do we tell how many numbers are smaller than 4 (1 and 3)?&lt;/p&gt;

&lt;p&gt;The generalized answer to this question would be to store additional information at every node in the tree. As you insert a node into a tree and it trickles down the tree to its new correct location you can at every node store which path the node has passed. For example for the &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; node if we store how many nodes passed to the left (&lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt; total) then you can very quickly find out how many numbers are smaller than &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; without having to explicitly know what the numbers are ( a major time saver ). For point of example we will refer to the the number of values passed to the left (stored at every node) as &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_left&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we assume &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt; is the current number being processed and we want to know how many numbers are less than &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt; then we have to start at the root node (&lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;) and proceed down to &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt; and count all the left path when we go right as well as counting the nodes we go through themselves.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/binary_tree_passed_to_left_included.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Therefore to calculate the numbers less than 13 we would have to follow the following logic:&lt;br /&gt;
```
less_than_13 = 0&lt;/p&gt;

&lt;p&gt;Is 8 equal to 13? No.&lt;br /&gt;
Is 8 less than 13? Yes. All numbers that are less than 8 are also less than 13 so we must include all passed_to_left of 8 to less_than_13 including 8 itself: less_than_13 = less_than_13 + 8.passed_to_left + 1&lt;br /&gt;
less_than_13 = 0+5+1 = 6&lt;/p&gt;

&lt;p&gt;Now we shift down to 10 in our search for 13 since 13 &amp;gt; 8 and therefore 13 must be in right subtree of 8.
Is 10 equal to 13? No.&lt;br /&gt;
Is 10 less than 13? Yes. All numbers that are less than 10 are also less than 13 so we must include all passed_to_left of 10 to less_than_13 including 10 itself: less_than_13 = less_than_13 + 10.passed_to_left + 1&lt;br /&gt;
less_than_13 = 6+0+1 = 7&lt;/p&gt;

&lt;p&gt;Now we shift down to 14 in our search for 13 since 13 &amp;gt; 10 and therefore 13 must be in right subtree of 10.
Is 14 equal to 13? No.&lt;br /&gt;
Is 14 greater than 13? Yes. We can’t be sure that all numbers that passed to left of 14 are bigger than 13 so must go down to left subtree of 14 to check.&lt;/p&gt;

&lt;p&gt;Now we are down to 13.&lt;br /&gt;
Is 13 equal to 13? Yes. Add passed_to_left to less_than_13: less_than_13 = less_than_13 + 13.passed_to_left  &lt;br /&gt;
less_than_13 = 7+0 = 7
```&lt;/p&gt;

&lt;p&gt;Therefore there are &lt;code class=&quot;highlighter-rouge&quot;&gt;7&lt;/code&gt; numbers in this tree that are less than &lt;code class=&quot;highlighter-rouge&quot;&gt;13&lt;/code&gt; (as you can visually confirm).&lt;/p&gt;

&lt;p&gt;Those familiar with coding and binary search trees will see that this is not too difficult to implement with some recursion.&lt;/p&gt;

&lt;p&gt;We recall that we also need to keep track of the numbers that are bigger than the current number and are to the right. One way I managed to do this is to first insert all the numbers into the tree while keeping track of &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_left&lt;/code&gt;. After this, starting with the last number and going all the way back to the first number you cancel the &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_left&lt;/code&gt; update for that given number but now do the opposite by storing the right path update ( to be able to tell what how many nodes are bigger than a given node). As you are doing this you can compute the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;a * b&lt;/code&gt; value and therefore overall triple count after going all the way from right to left. Updating the equivalent &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_right&lt;/code&gt; is very similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_left&lt;/code&gt; due to the symmetry of binary search trees.&lt;/p&gt;

&lt;p&gt;While updating the right path and left path data I was now able to determine how many numbers are bigger to the right and how many numbers are smaller to the left giving me the correct &lt;code class=&quot;highlighter-rouge&quot;&gt;a * b&lt;/code&gt; product in &lt;code class=&quot;highlighter-rouge&quot;&gt;log(N)&lt;/code&gt; due to binary search properties (average time where &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; is array size). Finding smaller and bigger numbers for each number in array gave me overall average algorithm run time of &lt;code class=&quot;highlighter-rouge&quot;&gt;Nlog(N)&lt;/code&gt;. The run time being fast enough to handle all of the hackerrank test cases correctly.&lt;/p&gt;

&lt;p&gt;To illustrate, one of the test cases had an array with &lt;code class=&quot;highlighter-rouge&quot;&gt;55555&lt;/code&gt; integers as input with correct answer of &lt;code class=&quot;highlighter-rouge&quot;&gt;3368945032206&lt;/code&gt; distinct triples. If I was to find all smaller/bigger numbers by checking all the numbers (as suggested in beginning of Attempt 4) then I would have to check &lt;code class=&quot;highlighter-rouge&quot;&gt;55554&lt;/code&gt; numbers every single time. However, with the tree implementation it should average out to log base 2 of &lt;code class=&quot;highlighter-rouge&quot;&gt;55555&lt;/code&gt; which is about &lt;code class=&quot;highlighter-rouge&quot;&gt;16&lt;/code&gt;. Clearly &lt;code class=&quot;highlighter-rouge&quot;&gt;16&lt;/code&gt; is the better option.&lt;/p&gt;

&lt;p&gt;When dealing with the double occurrences of numbers it is important to simply keep track if the number has occurred already or not with respect to current number being processed (do this with an additional data field in tree structure). For example if you are processing the array from left to right while updating the left path occurrences then you want to make sure you don’t double update &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_left&lt;/code&gt;. When you are going from right to left you want to make sure you don’t remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_left&lt;/code&gt; occurrence if there is still an another number of same value that has not been processed. When you hit second occurrence of number going from left to right you want to make sure you don’t double update &lt;code class=&quot;highlighter-rouge&quot;&gt;passed_to_right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you keep all these ideas in mind then you should be able to reproduce the solution in code and get your very own:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hacker_rank_pass.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is my rough code for those who still have any questions (The solution is so rough that it does not even clean up memory after itself. You have been warned):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#skipcode&quot;&gt;Skip ahead if you are not interested in the code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;```
#include &lt;iostream&gt;
#include &lt;stack&gt;
using namespace std;&lt;/stack&gt;&lt;/iostream&gt;&lt;/p&gt;

&lt;p&gt;struct tree{
    tree *left;
    tree *right;
    int value;
    int passed_to_left;//how many nodes when inserted into tree had to go to left subtree
    int passed_to_right;//how many nodes when inserted into tree had to go to right subtree
    int beforeFrequency;
    int afterFrequency;
    int lastBiggest;
};&lt;/p&gt;

&lt;p&gt;tree * newTree(int value){
    tree * newT = new tree();
    newT-&amp;gt;right = NULL;
    newT-&amp;gt;left = NULL;
    newT-&amp;gt;value = value;
    newT-&amp;gt;passed_to_left = 0;
    newT-&amp;gt;passed_to_right = 0;
    newT-&amp;gt;beforeFrequency = 1;
    newT-&amp;gt;afterFrequency = 0;
    newT-&amp;gt;lastBiggest = 0;
    return newT;
}&lt;/p&gt;

&lt;p&gt;//Return node in tree that contains num as the value
//if node does not exist then NULL is returned
tree * isNumThere(int num, tree * t){
    if(t == NULL){
        return NULL;
    }
    else{
        if(num == t-&amp;gt;value){
            return t;
        }
        else if(num &amp;lt; t-&amp;gt;value){
            return isNumThere(num,t-&amp;gt;left);
        }
        else{
            return isNumThere(num,t-&amp;gt;right);
        }
    }
    return NULL;
}&lt;/p&gt;

&lt;p&gt;tree * passed_to_left_only_insert(int num, tree * t){
    if(t == NULL){
        return newTree(num);
    }
    else{
        if(num == t-&amp;gt;value){
            t-&amp;gt;beforeFrequency++;
        }
        else if(num &amp;lt; t-&amp;gt;value){
            t-&amp;gt;passed_to_left++;
            t-&amp;gt;left = passed_to_left_only_insert(num, t-&amp;gt;left);
        }
        else{
            t-&amp;gt;right = passed_to_left_only_insert(num,t-&amp;gt;right);
        }
        return t;
    }
    return NULL;
}&lt;/p&gt;

&lt;p&gt;void remove_left_occurences(int num, tree *t){
    if(num &amp;lt; t-&amp;gt;value){
        t-&amp;gt;passed_to_left–;
        remove_left_occurences(num, t-&amp;gt;left);
    }
    else if(num &amp;gt; t-&amp;gt;value){
        remove_left_occurences(num,t-&amp;gt;right);
    }
}&lt;/p&gt;

&lt;p&gt;void add_right_occurences(int num, tree *t){
    if(num &amp;lt; t-&amp;gt;value){
        add_right_occurences(num, t-&amp;gt;left);
    }
    else if(num &amp;gt; t-&amp;gt;value){
        t-&amp;gt;passed_to_right++;
        add_right_occurences(num,t-&amp;gt;right);
    }  &lt;br /&gt;
}&lt;/p&gt;

&lt;p&gt;long long findNumbersBiggerThanNumAndAfter(int num,tree * t){
    if(num == t-&amp;gt;value){
        return t-&amp;gt;passed_to_right;
    }
    else if(num &amp;lt; t-&amp;gt;value){
        return t-&amp;gt;passed_to_right + findNumbersBiggerThanNumAndAfter(num,t-&amp;gt;left)+(t-&amp;gt;afterFrequency &amp;gt; 0 ? 1 : 0);
    }
    else{
        return findNumbersBiggerThanNumAndAfter(num,t-&amp;gt;right);
    }
    return 0;
}&lt;/p&gt;

&lt;p&gt;long long findNumbersSmallerThanNumAndBefore(int num,tree * t){
    if(num == t-&amp;gt;value){
        return t-&amp;gt;passed_to_left;
    }
    else if(num &amp;lt; t-&amp;gt;value){
        return findNumbersSmallerThanNumAndBefore(num,t-&amp;gt;left);
    }
    else{
        return t-&amp;gt;passed_to_left + findNumbersSmallerThanNumAndBefore(num,t-&amp;gt;right)+(t-&amp;gt;beforeFrequency &amp;gt; 0 ? 1 : 0);
    }
    return 0;
}&lt;/p&gt;

&lt;p&gt;int main() { &lt;br /&gt;
    int num;cin»num;
    stack&lt;int&gt; numHistory;
    tree * t = NULL;&lt;/int&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while(cin&amp;gt;&amp;gt;num){
    numHistory.push(num);
    tree * exists = isNumThere(num,t);
    if(exists==NULL){
        t = passed_to_left_only_insert(num,t);
    }
    else{
        exists-&amp;gt;beforeFrequency++;
    }
}

long long result = 0;
while(!numHistory.empty()){
    num = numHistory.top();
    numHistory.pop();
    tree * exists = isNumThere(num,t);
    if(exists-&amp;gt;afterFrequency == 0){
        add_right_occurences(num,t);
    }
    exists-&amp;gt;afterFrequency++;
    
    if(exists-&amp;gt;beforeFrequency==1){
        remove_left_occurences(num,t);
    }
    exists-&amp;gt;beforeFrequency--;      
    
    long beforeAndSmaller = findNumbersSmallerThanNumAndBefore(num,t);
    long afterAndBigger = findNumbersBiggerThanNumAndAfter(num,t) - exists-&amp;gt;lastBiggest;
    exists-&amp;gt;lastBiggest = afterAndBigger;        
    result= result + (beforeAndSmaller*afterAndBigger);
}
cout&amp;lt;&amp;lt;result&amp;lt;&amp;lt;endl; } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;skipcode&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hopefully, you learned something new in my puzzle solution and if you did not then that is okay too.&lt;/p&gt;

&lt;h3 id=&quot;non-code-stuff&quot;&gt;Non code stuff&lt;/h3&gt;
&lt;p&gt;&lt;a name=&quot;skipprog&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Currently in British Columbia before the school term starts. Really excited to be back in Waterloo. Here are some pictures of BC life:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/coast_view.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/cat_graffiti.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ships_in_bc.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/trucks_in_bc.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just had to recently renew my domain name. Hard to believe that it has already been two years since I first purchased it. Time flies.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Aug 2016 17:28:00 -0400</pubDate>
        <link>/programming/2016/08/29/triplets/</link>
        <guid isPermaLink="true">/programming/2016/08/29/triplets/</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Summer Start</title>
        <description>&lt;p&gt;Just finished another term at University of Waterloo. This term was very interesting and at the same time tough. I took PHYS122, AMATH353, CS371 and CS343. In addition, I started working on a University Research Assistant (URA) project which I will post more details later on. Currently doing a work term and enjoying the beautiful summer term and increase in free time.&lt;/p&gt;

&lt;p&gt;I was recently playing around with a little bit of data visualization. Here is a little script I wrote that can map out the directory the script is currently in. The red dot represents the root directory and the leafs of the tree where the blue circles represent the file size. The vertex with more than one edge connecting to it represent a directory.&lt;/p&gt;

&lt;p&gt;Here is a mapping of this website:
&lt;img src=&quot;/assets/website.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a mapping of the directory mapping of my URA project:
&lt;img src=&quot;/assets/ura.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is a mapping of my course work for the past two terms:
&lt;img src=&quot;/assets/course_work.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And finally a combination of the past three directories:
&lt;img src=&quot;/assets/all3.png&quot; alt=&quot;graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the current script doesn’t scale too well for large file structures, but the script can be easily adjusted for that if necessary.&lt;/p&gt;

&lt;p&gt;Here is the &lt;a href=&quot;/assets/map.sh&quot;&gt;script&lt;/a&gt; (&lt;a href=&quot;https://github.com/mannyray/mapOutDirectory&quot;&gt;updated and better version&lt;/a&gt;).&lt;/p&gt;

</description>
        <pubDate>Sun, 08 May 2016 07:40:00 -0400</pubDate>
        <link>/school/2016/05/08/summer-start/</link>
        <guid isPermaLink="true">/school/2016/05/08/summer-start/</guid>
        
        
        <category>school</category>
        
      </item>
    
  </channel>
</rss>
